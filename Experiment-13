#include<stdio.h>
1.	int binarySearch(int a[], int beg, int end, int val)    
2.	{    
3.	    int mid;    
4.	    if(end >= beg)     
5.	    {        mid = (beg + end)/2;    
6.	/* if the item to be searched is present at middle */  
7.	        if(a[mid] == val)    
8.	        {                 
9.	            return mid+1;    
10.	        }    
11.	            /* if the item to be searched is smaller than middle, then it can only be in left subarray */  
12.	        else if(a[mid] < val)     
13.	        {  
14.	            return binarySearch(a, mid+1, end, val);    
15.	        }    
16.	            /* if the item to be searched is greater than middle, then it can only be in right subarray */  
17.	        else     
18.	        {  
19.	            return binarySearch(a, beg, mid-1, val);    
20.	        }          
21.	    }    
22.	    return -1;     
23.	}   

int main(){

   /* Here i & j for loop counters, temp for swapping,
    * count for total number of elements, number[] to
    * store the input numbers in array. You can increase
    * or decrease the size of number array as per requirement
    */
   int i, j, count, temp, number[25];
	int val = 40; // value to be searched  
   printf("How many numbers u are going to enter?: ");
   scanf("%d",&count);

   printf("Enter %d elements: ", count);
   // This loop would store the input numbers in array
   for(i=0;i<count;i++)
      scanf("%d",&number[i]);

   // Implementation of insertion sort algorithm
   for(i=1;i<count;i++){
      temp=number[i];
      j=i-1;
      while((temp<number[j])&&(j>=0)){
         number[j+1]=number[j];
         j=j-1;
      }
      number[j+1]=temp;
   }

   printf("Order of Sorted elements: ");
   for(i=0;i<count;i++)
      printf(" %d",number[i]);
int res = binarySearch(a, 0, n-1, val); // Store result  
1.	printf("\nElement to be searched is - %d", val);  
2.	  if (res == -1)  
3.	  printf("\nElement is not present in the array");  
4.	  else  
5.	  printf("\nElement is present at %d position of array", res);  

   return 0;
}

